--Write your teams details here:
-- Team No: 11
-- Stu ID 1: 700513X          Surname: Bunawan                 Firstname: Jonas

SET SERVEROUTPUT ON;

--Place all DROP object statements below this line (tables, sequences etc)
DROP TABLE GENDERSPELLING;
DROP TABLE ERROREVENT;
DROP SEQUENCE ERROREVENTSEQ;
DROP TABLE DWPROD;
DROP SEQUENCE DWPRODSEQ;
DROP TABLE DWCUST;
DROP SEQUENCE DWCUSTSEQ;
DROP TABLE DWSALE;
DROP SEQUENCE DWSALESEQ;

/

--Place all CREATE SEQUENCE statements below this line (separate each statement with a line containing / )
CREATE SEQUENCE ERROREVENTSEQ;
/
CREATE SEQUENCE DWPRODSEQ;
/
CREATE SEQUENCE DWCUSTSEQ;
/
CREATE SEQUENCE DWSALESEQ;
/

--Place all CREATE TABLE statements below this line  (separate each statement with a line containing / )
CREATE TABLE GENDERSPELLING (
  INVALID_VALUE     VARCHAR2(10)
, NEW_VALUE         VARCHAR2(10)
);
/
CREATE TABLE ERROREVENT (
  ERRORID       INTEGER
, SOURCE_ROWID  ROWID
, SOURCE_TABLE  VARCHAR2(30)
, FILTERID      INTEGER
, DATETIME      DATE
, ACTION        VARCHAR2(6)
, CONSTRAINT  ERROREVENTACTION
  CHECK (ACTION IN ('SKIP', 'MODIFY'))
);
/
CREATE TABLE DWPROD (
  DWPRODID      INTEGER
, DWSOURCETABLE VARCHAR2(30)
, DWSOURCEID    NUMBER(22)
, PRODNAME      VARCHAR2(100)
, PRODCATNAME   VARCHAR2(100)
, PRODSHIPNAME  VARCHAR2(100)
, PRODMANUNAME  VARCHAR2(100)
);
/
CREATE TABLE DWCUST (
  DWCUSTID        INTEGER
, DWSOURCEIDBRIS  NUMBER(22)
, DWSOURCEIDMELB  NUMBER(22)
, FIRSTNAME       VARCHAR2(20)
, SURNAME         VARCHAR2(20)
, GENDER          VARCHAR2(10)
, PHONE           VARCHAR2(15)
, POSTCODE        VARCHAR2(10)
, CITY            VARCHAR2(30)
, STATE           VARCHAR2(10)
, CUSTCATNAME     VARCHAR2(100)
);
/
CREATE TABLE DWSALE (
  DWSALEID        INTEGER
, DWCUSTID        NUMBER(22)
, DWPRODID        NUMBER(22)       
, DWSOURCEIDBRIS  ROWID
, DWSOURCEIDMELB  ROWID
, QTY             NUMBER(22)
, SALEDATE        DATE
, SHIPDATE        DATE
, SALEPRICE       NUMBER(22)
);
/

--Place the GENDERSPELLING statements statement below this line  
INSERT ALL
  INTO GENDERSPELLING (INVALID_VALUE, NEW_VALUE) VALUES ('MAIL', 'M')
  INTO GENDERSPELLING (INVALID_VALUE, NEW_VALUE) VALUES ('WOMAN', 'F')
  INTO GENDERSPELLING (INVALID_VALUE, NEW_VALUE) VALUES ('FEM', 'F')
  INTO GENDERSPELLING (INVALID_VALUE, NEW_VALUE) VALUES ('FEMALE', 'F')
  INTO GENDERSPELLING (INVALID_VALUE, NEW_VALUE) VALUES ('MALE', 'M')
  INTO GENDERSPELLING (INVALID_VALUE, NEW_VALUE) VALUES ('GENTLEMAN', 'M')
  INTO GENDERSPELLING (INVALID_VALUE, NEW_VALUE) VALUES ('MM', 'M')
  INTO GENDERSPELLING (INVALID_VALUE, NEW_VALUE) VALUES ('FF', 'F')
  INTO GENDERSPELLING (INVALID_VALUE, NEW_VALUE) VALUES ('FEMAIL', 'F')
SELECT 1 FROM DUAL;
/

--Code to get Most Current Price
CREATE OR REPLACE VIEW VIEW_SALES AS
  SELECT * FROM PSALA.A2_T11_SALEBRIS
  UNION ALL
  SELECT * FROM PSALA.A2_T11_SALEMELB;
/

CREATE OR REPLACE FUNCTION SF_GET_MOST_RECENT_PRICE (pProdId PSALA.A2PRODUCT.PRODID%TYPE)RETURN NUMBER AS
  vPrice PSALA.A2_T11_SALEBRIS.SALEPRICE%TYPE;
BEGIN
  
  SELECT  AVG(SALEPRICE) INTO vPrice
  FROM    VIEW_SALES
  WHERE   saledate = (SELECT MAX(SALEDATE) FROM VIEW_SALES WHERE PRODID = pProdId)
    AND PRODID = pProdId;

  RETURN vPrice;
END;
/

--====================================================================================================
--Place CREATE OR REPLACE SP_CLEAN_PRODUCT code below this line (or leave blank if not attempted)
CREATE OR REPLACE PROCEDURE SP_CLEAN_PRODUCT AS
BEGIN
  MERGE INTO ERROREVENT EE
  USING (SELECT           P.ROWID AS SOURCE_ROWID, 
                          'A2PRODUCT' AS SOURCE_TABLE, 
                          1 AS FILTERID, 
                          SYSDATE AS DATETIME, 
                          'MODIFY' AS ACTION
                FROM      PSALA.A2PRODUCT P
                WHERE     P.PRODUCTCATEGORY NOT IN
                            (SELECT PC.PRODUCTCATEGORY
                             FROM PSALA.A2PRODCATEGORY PC)
                          OR
                          P.PRODUCTCATEGORY IS NULL) EE1
  ON (EE.SOURCE_ROWID = EE1.SOURCE_ROWID AND EE.FILTERID = EE1.FILTERID)
  WHEN MATCHED THEN UPDATE SET EE.SOURCE_TABLE = EE1.SOURCE_TABLE,
                               EE.DATETIME = EE1.DATETIME,
                               EE.ACTION = EE1.ACTION
  WHEN NOT MATCHED THEN INSERT
    (ERRORID, SOURCE_ROWID, SOURCE_TABLE, FILTERID, DATETIME, ACTION)
  VALUES
    (ERROREVENTSEQ.NEXTVAL, EE1.SOURCE_ROWID, EE1.SOURCE_TABLE, EE1.FILTERID, EE1.DATETIME, EE1.ACTION); 
END;
/

--Place CREATE OR REPLACE SP_UPLOAD_PRODUCT code below this line (or leave blank if not attempted)
CREATE OR REPLACE PROCEDURE SP_UPLOAD_PRODUCT AS
BEGIN
  MERGE INTO DWPROD DP
  USING (SELECT       'A2PRODUCT' AS DWSOURCETABLE, 
                      P.PRODID AS DWSOURCEID, 
                      P.PRODNAME AS PRODNAME,
                      PC.CATEGORYNAME AS PRODCATNAME,
                      S.SHIPPINGNAME AS PRODSHIPNAME,
                      M.MANUNAME AS PRODMANUNAME
            FROM      PSALA.A2PRODUCT P
            NATURAL JOIN PSALA.A2PRODCATEGORY PC
            NATURAL JOIN PSALA.A2SHIPPING S
            INNER JOIN PSALA.A2MANUFACTURER M
            ON M.MANUCODE = P.MANUFACTURERCODE
            WHERE     P.ROWID NOT IN
                                (SELECT SOURCE_ROWID
                                 FROM ERROREVENT
                                 WHERE FILTERID = 1)) DP1
  ON (DP.DWPRODID = DP1.DWSOURCEID)
  WHEN NOT MATCHED THEN INSERT 
    (DWPRODID, DWSOURCETABLE, DWSOURCEID, PRODNAME, PRODCATNAME, PRODSHIPNAME, PRODMANUNAME)
  VALUES
    (DWPRODSEQ.NEXTVAL, DP1.DWSOURCETABLE, DP1.DWSOURCEID, DP1.PRODNAME, DP1.PRODCATNAME, DP1.PRODSHIPNAME, DP1.PRODMANUNAME);
  
  MERGE INTO DWPROD DP
  USING (SELECT       'A2PRODUCT' AS DWSOURCETABLE, 
                      P.PRODID AS DWSOURCEID, 
                      P.PRODNAME AS PRODNAME,
                      'UNKNOWN' AS PRODCATNAME,
                      S.SHIPPINGNAME AS PRODSHIPNAME,
                      M.MANUNAME AS PRODMANUNAME
            FROM      PSALA.A2PRODUCT P
            NATURAL JOIN PSALA.A2SHIPPING S
            INNER JOIN PSALA.A2MANUFACTURER M
            ON M.MANUCODE = P.MANUFACTURERCODE
            WHERE     P.ROWID IN
                                (SELECT SOURCE_ROWID
                                 FROM ERROREVENT
                                 WHERE FILTERID = 1
                                 AND   ACTION = 'MODIFY')) DP1
  ON (DP.DWPRODID = DP1.DWSOURCEID)
  WHEN MATCHED THEN UPDATE SET DP.PRODCATNAME = DP1.PRODCATNAME
  WHEN NOT MATCHED THEN INSERT 
    (DWPRODID, DWSOURCETABLE, DWSOURCEID, PRODNAME, PRODCATNAME, PRODSHIPNAME, PRODMANUNAME)
  VALUES
    (DWPRODSEQ.NEXTVAL, DP1.DWSOURCETABLE, DP1.DWSOURCEID, DP1.PRODNAME, DP1.PRODCATNAME, DP1.PRODSHIPNAME, DP1.PRODMANUNAME);
END;
/

--Place code anonymous block to execute the above SPs below this line (or leave blank if not attempted)
BEGIN
  SP_CLEAN_PRODUCT;
  SP_UPLOAD_PRODUCT;
END;
/
--====================================================================================================
--Place CREATE OR REPLACE SP_CLEAN_CUST_BRIS code below this line (or leave blank if not attempted)
CREATE OR REPLACE PROCEDURE SP_CLEAN_CUST_BRIS AS
BEGIN
  MERGE INTO ERROREVENT EE
  USING (SELECT           CB.ROWID AS SOURCE_ROWID, 
                          'A2_T11_CUSTBRIS' AS SOURCE_TABLE, 
                          2 AS FILTERID, 
                          SYSDATE AS DATETIME, 
                          'MODIFY' AS ACTION
                FROM      PSALA.A2_T11_CUSTBRIS CB
                WHERE     CB.CUSTCAT NOT IN
                            (SELECT CC.CUSTCATEGORY
                             FROM PSALA.A2CUSTCATEGORY CC)) EE1
  ON (EE.SOURCE_ROWID = EE1.SOURCE_ROWID AND EE.FILTERID = EE1.FILTERID)
  WHEN MATCHED THEN UPDATE SET EE.SOURCE_TABLE = EE1.SOURCE_TABLE,
                               EE.DATETIME = EE1.DATETIME,
                               EE.ACTION = EE1.ACTION
  WHEN NOT MATCHED THEN INSERT
    (ERRORID, SOURCE_ROWID, SOURCE_TABLE, FILTERID, DATETIME, ACTION)
  VALUES
    (ERROREVENTSEQ.NEXTVAL, EE1.SOURCE_ROWID, EE1.SOURCE_TABLE, EE1.FILTERID, EE1.DATETIME, EE1.ACTION);

  MERGE INTO ERROREVENT EE
  USING (SELECT           CB.ROWID AS SOURCE_ROWID, 
                          'A2_T11_CUSTBRIS' AS SOURCE_TABLE, 
                          3 AS FILTERID, 
                          SYSDATE AS DATETIME, 
                          'SKIP' AS ACTION
                FROM      PSALA.A2_T11_CUSTBRIS CB
                WHERE     CB.PHONE NOT LIKE '% %' AND CB.PHONE NOT LIKE '%-%' AND LENGTH(CB.PHONE) != 10) EE1
  ON (EE.SOURCE_ROWID = EE1.SOURCE_ROWID AND EE.FILTERID = EE1.FILTERID AND EE.ACTION = EE1.ACTION)
  WHEN MATCHED THEN UPDATE SET EE.SOURCE_TABLE = EE1.SOURCE_TABLE,
                               EE.DATETIME = EE1.DATETIME
  WHEN NOT MATCHED THEN INSERT
    (ERRORID, SOURCE_ROWID, SOURCE_TABLE, FILTERID, DATETIME, ACTION)
  VALUES
    (ERROREVENTSEQ.NEXTVAL, EE1.SOURCE_ROWID, EE1.SOURCE_TABLE, EE1.FILTERID, EE1.DATETIME, EE1.ACTION);
  
  MERGE INTO ERROREVENT EE
  USING (SELECT           CB.ROWID AS SOURCE_ROWID, 
                          'A2_T11_CUSTBRIS' AS SOURCE_TABLE, 
                          3 AS FILTERID, 
                          SYSDATE AS DATETIME, 
                          'MODIFY' AS ACTION
                FROM      PSALA.A2_T11_CUSTBRIS CB
                WHERE     CB.PHONE LIKE '% %' OR CB.PHONE LIKE '%-%') EE1
  ON (EE.SOURCE_ROWID = EE1.SOURCE_ROWID AND EE.FILTERID = EE1.FILTERID AND EE.ACTION = EE1.ACTION)
  WHEN MATCHED THEN UPDATE SET EE.SOURCE_TABLE = EE1.SOURCE_TABLE,
                               EE.DATETIME = EE1.DATETIME
  WHEN NOT MATCHED THEN INSERT
    (ERRORID, SOURCE_ROWID, SOURCE_TABLE, FILTERID, DATETIME, ACTION)
  VALUES
    (ERROREVENTSEQ.NEXTVAL, EE1.SOURCE_ROWID, EE1.SOURCE_TABLE, EE1.FILTERID, EE1.DATETIME, EE1.ACTION);

  MERGE INTO ERROREVENT EE
  USING (SELECT           CB.ROWID AS SOURCE_ROWID, 
                          'A2_T11_CUSTBRIS' AS SOURCE_TABLE, 
                          4 AS FILTERID, 
                          SYSDATE AS DATETIME, 
                          'MODIFY' AS ACTION
                FROM      PSALA.A2_T11_CUSTBRIS CB
                WHERE     UPPER(CB.GENDER) NOT IN ('M', 'F')) EE1
  ON (EE.SOURCE_ROWID = EE1.SOURCE_ROWID AND EE.FILTERID = EE1.FILTERID)
  WHEN MATCHED THEN UPDATE SET EE.SOURCE_TABLE = EE1.SOURCE_TABLE,
                               EE.DATETIME = EE1.DATETIME,
                               EE.ACTION = EE1.ACTION
  WHEN NOT MATCHED THEN INSERT
    (ERRORID, SOURCE_ROWID, SOURCE_TABLE, FILTERID, DATETIME, ACTION)
  VALUES
    (ERROREVENTSEQ.NEXTVAL, EE1.SOURCE_ROWID, EE1.SOURCE_TABLE, EE1.FILTERID, EE1.DATETIME, EE1.ACTION); 
END;
/

--Place CREATE OR REPLACE SP_UPLOAD_CUST_BRIS code below this line (or leave blank if not attempted)
CREATE OR REPLACE PROCEDURE SP_UPLOAD_CUSTOMER_BRIS AS
BEGIN
  MERGE INTO DWCUST DC
  USING (SELECT       CB.ID AS ID,
                      CB.FNAME AS FNAME,
                      CB.SNAME AS SNAME,
                      CB.GENDER AS GENDER,
                      CB.PHONE AS PHONE,
                      CB.POSTCODE AS POSTCODE,
                      CB.CITY AS CITY,
                      CB.STATE AS STATE,
                      CC.CATEGORYNAME AS CATEGORYNAME
            FROM      PSALA.A2_T11_CUSTBRIS CB
            INNER JOIN PSALA.A2CUSTCATEGORY CC
            ON CB.CUSTCAT = CC.CUSTCATEGORY
            WHERE     CB.ROWID NOT IN
                                  (SELECT SOURCE_ROWID
                                   FROM ERROREVENT
                                   WHERE FILTERID IN(2, 3, 4)))  DC1
  ON (DC.DWSOURCEIDBRIS = DC1.ID)
  WHEN NOT MATCHED THEN INSERT 
    (DWCUSTID, DWSOURCEIDBRIS, FIRSTNAME, SURNAME, GENDER, PHONE, POSTCODE, CITY, STATE, CUSTCATNAME)
  VALUES (DWCUSTSEQ.NEXTVAL, DC1.ID, DC1.FNAME, DC1.SNAME, DC1.GENDER, DC1.PHONE, DC1.POSTCODE, DC1.CITY, DC1.STATE, DC1.CATEGORYNAME);
                                   
  MERGE INTO DWCUST DC
  USING (SELECT     CB.ID AS ID,
                    CB.FNAME AS FNAME,
                    CB.SNAME AS SNAME,
                    CB.GENDER AS GENDER,
                    CB.PHONE AS PHONE,
                    CB.POSTCODE AS POSTCODE,
                    CB.CITY AS CITY,
                    CB.STATE AS STATE,
                    'UNKNOWN' AS CATEGORYNAME
          FROM      PSALA.A2_T11_CUSTBRIS CB
          WHERE     CB.ROWID IN
                                (SELECT SOURCE_ROWID
                                 FROM ERROREVENT
                                 WHERE FILTERID = 2
                                 AND ACTION = 'MODIFY'))  DC1
  ON (DC.DWSOURCEIDBRIS = DC1.ID)
  WHEN MATCHED THEN UPDATE SET DC.CUSTCATNAME = DC1.CATEGORYNAME
  WHEN NOT MATCHED THEN INSERT 
    (DWCUSTID, DWSOURCEIDBRIS, FIRSTNAME, SURNAME, GENDER, PHONE, POSTCODE, CITY, STATE, CUSTCATNAME)
  VALUES (DWCUSTSEQ.NEXTVAL, DC1.ID, DC1.FNAME, DC1.SNAME, DC1.GENDER, DC1.PHONE, DC1.POSTCODE, DC1.CITY, DC1.STATE, DC1.CATEGORYNAME);
                                 
  MERGE INTO DWCUST DC
  USING (SELECT     CB.ID AS ID,
                    CB.FNAME AS FNAME,
                    CB.SNAME AS SNAME,
                    CB.GENDER AS GENDER,
                    REPLACE(REPLACE(CB.PHONE, ' ', ''), '-', '') AS PHONE,
                    CB.POSTCODE AS POSTCODE,
                    CB.CITY AS CITY,
                    CB.STATE AS STATE,
                    CC.CATEGORYNAME AS CATEGORYNAME
          FROM      PSALA.A2_T11_CUSTBRIS CB
          INNER JOIN PSALA.A2CUSTCATEGORY CC
          ON CB.CUSTCAT = CC.CUSTCATEGORY
          WHERE     CB.ROWID IN
                                (SELECT SOURCE_ROWID
                                 FROM ERROREVENT
                                 WHERE FILTERID = 3 
                                 AND ACTION = 'MODIFY'))  DC1
  ON (DC.DWSOURCEIDBRIS = DC1.ID)
  WHEN MATCHED THEN UPDATE SET DC.PHONE = DC1.PHONE
  WHEN NOT MATCHED THEN INSERT 
    (DWCUSTID, DWSOURCEIDBRIS, FIRSTNAME, SURNAME, GENDER, PHONE, POSTCODE, CITY, STATE, CUSTCATNAME)
  VALUES (DWCUSTSEQ.NEXTVAL, DC1.ID, DC1.FNAME, DC1.SNAME, DC1.GENDER, DC1.PHONE, DC1.POSTCODE, DC1.CITY, DC1.STATE, DC1.CATEGORYNAME);
  
  MERGE INTO DWCUST DC
  USING (SELECT     CB.ID AS ID,
                    CB.FNAME AS FNAME,
                    CB.SNAME AS SNAME,
                    GS.NEW_VALUE AS GENDER,
                    CB.PHONE AS PHONE,
                    CB.POSTCODE AS POSTCODE,
                    CB.CITY AS CITY,
                    CB.STATE AS STATE,
                    CC.CATEGORYNAME AS CATEGORYNAME
          FROM      PSALA.A2_T11_CUSTBRIS CB
          INNER JOIN PSALA.A2CUSTCATEGORY CC
          ON CB.CUSTCAT = CC.CUSTCATEGORY
          INNER JOIN GENDERSPELLING GS
          ON GS.INVALID_VALUE = UPPER(CB.GENDER)
          WHERE     CB.ROWID IN
                                (SELECT SOURCE_ROWID
                                 FROM ERROREVENT
                                 WHERE FILTERID = 4
                                 AND ACTION = 'MODIFY'))  DC1
  ON (DC.DWSOURCEIDBRIS = DC1.ID)
  WHEN MATCHED THEN UPDATE SET DC.GENDER = DC1.GENDER
  WHEN NOT MATCHED THEN INSERT 
    (DWCUSTID, DWSOURCEIDBRIS, FIRSTNAME, SURNAME, GENDER, PHONE, POSTCODE, CITY, STATE, CUSTCATNAME)
  VALUES (DWCUSTSEQ.NEXTVAL, DC1.ID, DC1.FNAME, DC1.SNAME, DC1.GENDER, DC1.PHONE, DC1.POSTCODE, DC1.CITY, DC1.STATE, DC1.CATEGORYNAME);
                          
  MERGE INTO DWCUST DC
  USING (SELECT     CB.ID AS ID,
                    CB.FNAME AS FNAME,
                    CB.SNAME AS SNAME,
                    CB.GENDER AS GENDER,
                    CB.PHONE AS PHONE,
                    CB.POSTCODE AS POSTCODE,
                    CB.CITY AS CITY,
                    CB.STATE AS STATE,
                    CC.CATEGORYNAME AS CATEGORYNAME
          FROM      PSALA.A2_T11_CUSTBRIS CB
          INNER JOIN PSALA.A2CUSTCATEGORY CC
          ON CB.CUSTCAT = CC.CUSTCATEGORY
          WHERE     CB.ROWID IN
                                (SELECT SOURCE_ROWID
                                 FROM ERROREVENT
                                 WHERE FILTERID = 4)
                    AND
                    UPPER(CB.GENDER) NOT IN
                                (SELECT GS.INVALID_VALUE
                                 FROM GENDERSPELLING GS))  DC1
  ON (DC.DWSOURCEIDBRIS = DC1.ID)
  WHEN MATCHED THEN UPDATE SET DC.GENDER = DC1.GENDER
  WHEN NOT MATCHED THEN INSERT 
    (DWCUSTID, DWSOURCEIDBRIS, FIRSTNAME, SURNAME, GENDER, PHONE, POSTCODE, CITY, STATE, CUSTCATNAME)
  VALUES (DWCUSTSEQ.NEXTVAL, DC1.ID, DC1.FNAME, DC1.SNAME, DC1.GENDER, DC1.PHONE, DC1.POSTCODE, DC1.CITY, DC1.STATE, DC1.CATEGORYNAME);
END;
/

--Place code that executes the above SPs below this line (or leave blank if not attempted)
BEGIN
  SP_CLEAN_CUST_BRIS;
  SP_UPLOAD_CUSTOMER_BRIS;
END;
/
--====================================================================================================
--Place CREATE OR REPLACE SP_CLEAN_SALES_BRIS code below this line (or leave blank if not attempted)
CREATE OR REPLACE PROCEDURE SP_CLEAN_SALES_BRIS AS
BEGIN
  MERGE INTO ERROREVENT EE
  USING (SELECT           SB.ROWID AS SOURCE_ROWID, 
                          'A2_T11_SALEBRIS' AS SOURCE_TABLE, 
                          5 AS FILTERID, 
                          SYSDATE AS DATETIME, 
                          'SKIP' AS ACTION
                FROM      PSALA.A2_T11_SALEBRIS SB
                WHERE     SB.PRODID NOT IN
                              (SELECT DWSOURCEID
                               FROM DWPROD
                               WHERE DWSOURCETABLE = 'A2PRODUCT')) EE1
  ON (EE.SOURCE_ROWID = EE1.SOURCE_ROWID AND EE.FILTERID = EE1.FILTERID)
  WHEN MATCHED THEN UPDATE SET EE.SOURCE_TABLE = EE1.SOURCE_TABLE,
                               EE.DATETIME = EE1.DATETIME,
                               EE.ACTION = EE1.ACTION
  WHEN NOT MATCHED THEN INSERT
    (ERRORID, SOURCE_ROWID, SOURCE_TABLE, FILTERID, DATETIME, ACTION)
  VALUES
    (ERROREVENTSEQ.NEXTVAL, EE1.SOURCE_ROWID, EE1.SOURCE_TABLE, EE1.FILTERID, EE1.DATETIME, EE1.ACTION);
  
  MERGE INTO ERROREVENT EE
  USING (SELECT           SB.ROWID AS SOURCE_ROWID, 
                          'A2_T11_SALEBRIS' AS SOURCE_TABLE, 
                          6 AS FILTERID, 
                          SYSDATE AS DATETIME, 
                          'SKIP' AS ACTION
                FROM      PSALA.A2_T11_SALEBRIS SB
                WHERE     SB.CUSTID NOT IN
                              (SELECT DC.DWSOURCEIDBRIS
                               FROM DWCUST DC)
                          OR
                          SB.CUSTID IS NULL) EE1
  ON (EE.SOURCE_ROWID = EE1.SOURCE_ROWID AND EE.FILTERID = EE1.FILTERID)
  WHEN MATCHED THEN UPDATE SET EE.SOURCE_TABLE = EE1.SOURCE_TABLE,
                               EE.DATETIME = EE1.DATETIME,
                               EE.ACTION = EE1.ACTION
  WHEN NOT MATCHED THEN INSERT
    (ERRORID, SOURCE_ROWID, SOURCE_TABLE, FILTERID, DATETIME, ACTION)
  VALUES
    (ERROREVENTSEQ.NEXTVAL, EE1.SOURCE_ROWID, EE1.SOURCE_TABLE, EE1.FILTERID, EE1.DATETIME, EE1.ACTION);
    
  MERGE INTO ERROREVENT EE
  USING (SELECT           SB.ROWID AS SOURCE_ROWID, 
                          'A2_T11_SALEBRIS' AS SOURCE_TABLE, 
                          7 AS FILTERID, 
                          SYSDATE AS DATETIME, 
                          'MODIFY' AS ACTION
                FROM      PSALA.A2_T11_SALEBRIS SB
                WHERE     SB.SHIPDATE < SB.SALEDATE) EE1
  ON (EE.SOURCE_ROWID = EE1.SOURCE_ROWID AND EE.FILTERID = EE1.FILTERID)
  WHEN MATCHED THEN UPDATE SET EE.SOURCE_TABLE = EE1.SOURCE_TABLE,
                               EE.DATETIME = EE1.DATETIME,
                               EE.ACTION = EE1.ACTION
  WHEN NOT MATCHED THEN INSERT
    (ERRORID, SOURCE_ROWID, SOURCE_TABLE, FILTERID, DATETIME, ACTION)
  VALUES
    (ERROREVENTSEQ.NEXTVAL, EE1.SOURCE_ROWID, EE1.SOURCE_TABLE, EE1.FILTERID, EE1.DATETIME, EE1.ACTION);
    
  MERGE INTO ERROREVENT EE
  USING (SELECT           SB.ROWID AS SOURCE_ROWID, 
                          'A2_T11_SALEBRIS' AS SOURCE_TABLE, 
                          8 AS FILTERID, 
                          SYSDATE AS DATETIME, 
                          'MODIFY' AS ACTION
                FROM      PSALA.A2_T11_SALEBRIS SB
                WHERE     SB.SALEPRICE IS NULL) EE1
  ON (EE.SOURCE_ROWID = EE1.SOURCE_ROWID AND EE.FILTERID = EE1.FILTERID)
  WHEN MATCHED THEN UPDATE SET EE.SOURCE_TABLE = EE1.SOURCE_TABLE,
                               EE.DATETIME = EE1.DATETIME,
                               EE.ACTION = EE1.ACTION
  WHEN NOT MATCHED THEN INSERT
    (ERRORID, SOURCE_ROWID, SOURCE_TABLE, FILTERID, DATETIME, ACTION)
  VALUES
    (ERROREVENTSEQ.NEXTVAL, EE1.SOURCE_ROWID, EE1.SOURCE_TABLE, EE1.FILTERID, EE1.DATETIME, EE1.ACTION);
END;
/

--Place CREATE OR REPLACE SP_UPLOAD_SALES_BRIS code below this line (or leave blank if not attempted)
CREATE OR REPLACE PROCEDURE SP_UPLOAD_SALE_BRIS AS
BEGIN
  MERGE INTO DWSALE DS
  USING ( SELECT  DC.DWCUSTID AS DWCUSTID,
                  DP.DWPRODID AS DWPRODID,
                  SB.ROWID AS DWSOURCEIDBRIS,
                  SB.QTY AS QTY,
                  SB.SALEDATE AS SALEDATE,
                  SB.SHIPDATE AS SHIPDATE,
                  SB.SALEPRICE AS SALEPRICE
          FROM    PSALA.A2_T11_SALEBRIS SB
          INNER JOIN DWCUST DC
          ON SB.CUSTID = DC.DWSOURCEIDBRIS
          INNER JOIN DWPROD DP
          ON SB.PRODID = DP.DWSOURCEID
          WHERE   SB.ROWID NOT IN
                            (SELECT SOURCE_ROWID
                             FROM ERROREVENT
                             WHERE FILTERID IN (5, 6, 7, 8)))  DS1
  ON (DS.DWSOURCEIDBRIS = DS1.DWSOURCEIDBRIS)
  WHEN MATCHED THEN UPDATE SET  DS.DWCUSTID = DS1.DWCUSTID, 
                                DS.DWPRODID = DS1.DWPRODID, 
                                DS.QTY = DS1.QTY, 
                                DS.SALEDATE = DS1.SALEDATE, 
                                DS.SHIPDATE = DS1.SHIPDATE, 
                                DS.SALEPRICE = DS1.SALEPRICE 
  WHEN NOT MATCHED THEN INSERT 
    (DWSALEID, DWCUSTID, DWPRODID, DWSOURCEIDBRIS, QTY, SALEDATE, SHIPDATE, SALEPRICE)
  VALUES (DWSALESEQ.NEXTVAL, DS1.DWCUSTID, DS1.DWPRODID, DS1.DWSOURCEIDBRIS, DS1.QTY, DS1.SALEDATE, DS1.SHIPDATE, DS1.SALEPRICE);
         
  MERGE INTO DWSALE DS
  USING (SELECT   DC.DWCUSTID AS DWCUSTID,
                  DP.DWPRODID AS DWPRODID,
                  SB.ROWID AS DWSOURCEIDBRIS,
                  SB.QTY AS QTY,
                  SB.SALEDATE AS SALEDATE,
                  TO_DATE(SB.SALEDATE) + 2 AS SHIPDATE,
                  SB.SALEPRICE AS SALEPRICE
          FROM    PSALA.A2_T11_SALEBRIS SB
          INNER JOIN DWCUST DC
          ON SB.CUSTID = DC.DWSOURCEIDBRIS
          INNER JOIN DWPROD DP
          ON SB.PRODID = DP.DWSOURCEID
          WHERE   SB.ROWID IN
                            (SELECT SOURCE_ROWID
                             FROM ERROREVENT
                             WHERE FILTERID = 7
                             AND   ACTION = 'MODIFY'))  DS1
  ON (DS.DWSOURCEIDBRIS = DS1.DWSOURCEIDBRIS)
  WHEN MATCHED THEN UPDATE SET DS.SHIPDATE = DS1.SHIPDATE
  WHEN NOT MATCHED THEN INSERT 
    (DWSALEID, DWCUSTID, DWPRODID, DWSOURCEIDBRIS, QTY, SALEDATE, SHIPDATE, SALEPRICE)
  VALUES (DWSALESEQ.NEXTVAL, DS1.DWCUSTID, DS1.DWPRODID, DS1.DWSOURCEIDBRIS, DS1.QTY, DS1.SALEDATE, DS1.SHIPDATE, DS1.SALEPRICE);                           
                             
  MERGE INTO DWSALE DS
  USING (SELECT   DC.DWCUSTID AS DWCUSTID,
                  DP.DWPRODID AS DWPRODID,
                  SB.ROWID AS DWSOURCEIDBRIS,
                  SB.QTY AS QTY,
                  SB.SALEDATE AS SALEDATE,
                  SB.SHIPDATE AS SHIPDATE,
                  SF_GET_MOST_RECENT_PRICE(SB.PRODID) AS SALEPRICE
          FROM    PSALA.A2_T11_SALEBRIS SB
          INNER JOIN DWCUST DC
          ON SB.CUSTID = DC.DWSOURCEIDBRIS
          INNER JOIN DWPROD DP
          ON SB.PRODID = DP.DWSOURCEID
          WHERE   SB.ROWID IN
                            (SELECT SOURCE_ROWID
                             FROM ERROREVENT
                             WHERE FILTERID = 8
                             AND   ACTION = 'MODIFY'))  DS1
  ON (DS.DWSOURCEIDBRIS = DS1.DWSOURCEIDBRIS)
  WHEN MATCHED THEN UPDATE SET DS.SALEPRICE = DS1.SALEPRICE
  WHEN NOT MATCHED THEN INSERT 
    (DWSALEID, DWCUSTID, DWPRODID, DWSOURCEIDBRIS, QTY, SALEDATE, SHIPDATE, SALEPRICE)
  VALUES (DWSALESEQ.NEXTVAL, DS1.DWCUSTID, DS1.DWPRODID, DS1.DWSOURCEIDBRIS, DS1.QTY, DS1.SALEDATE, DS1.SHIPDATE, DS1.SALEPRICE);
END;
/

--Place code that executes the above SPs below this line (or leave blank if not attempted)
BEGIN
  SP_CLEAN_SALES_BRIS;
  SP_UPLOAD_SALE_BRIS;
END;
/
--====================================================================================================
--Place CREATE OR REPLACE SP_CLEAN_CUST_MELB code below this line (or leave blank if not attempted)
CREATE OR REPLACE PROCEDURE SP_CLEAN_CUST_MELB AS
BEGIN
  MERGE INTO ERROREVENT EE
  USING (SELECT       CM.ROWID AS SOURCE_ROWID,
                      'A2_T11_CUSTMELB' AS SOURCE_TABLE,
                      9 AS FILTERID,
                      SYSDATE AS DATETIME,
                     'MODIFY' AS ACTION
               FROM   PSALA.A2_T11_CUSTMELB CM
               WHERE  CONCAT(CM.FNAME, CM.SNAME) IN
                          (SELECT CONCAT(DC.FIRSTNAME, DC.SURNAME)
                           FROM DWCUST DC)
                      AND
                      CM.PHONE IN
                          (SELECT DC.PHONE
                           FROM DWCUST DC)) EE1
  ON (EE.SOURCE_ROWID = EE1.SOURCE_ROWID AND EE.FILTERID = EE1.FILTERID)
  WHEN MATCHED THEN UPDATE SET EE.SOURCE_TABLE = EE1.SOURCE_TABLE,
                               EE.DATETIME = EE1.DATETIME,
                               EE.ACTION = EE1.ACTION
  WHEN NOT MATCHED THEN INSERT
    (ERRORID, SOURCE_ROWID, SOURCE_TABLE, FILTERID, DATETIME, ACTION)
  VALUES
    (ERROREVENTSEQ.NEXTVAL, EE1.SOURCE_ROWID, EE1.SOURCE_TABLE, EE1.FILTERID, EE1.DATETIME, EE1.ACTION);
END;
/

--Place CREATE OR REPLACE SP_UPLOAD_CUST_MELB code below this line (or leave blank if not attempted)
CREATE OR REPLACE PROCEDURE SP_UPLOAD_CUSTOMER_MELB AS
BEGIN
  MERGE INTO DWCUST DC
  USING (SELECT       CM.ID AS ID,
                      CM.FNAME AS FNAME,
                      CM.SNAME AS SNAME,
                      CM.GENDER AS GENDER,
                      CM.PHONE AS PHONE,
                      CM.POSTCODE AS POSTCODE,
                      CM.CITY AS CITY,
                      CM.STATE AS STATE,
                      CC.CATEGORYNAME AS CATEGORYNAME
            FROM      PSALA.A2_T11_CUSTMELB CM
            INNER JOIN PSALA.A2CUSTCATEGORY CC
            ON CM.CUSTCAT = CC.CUSTCATEGORY
            WHERE     CM.ROWID NOT IN
                                  (SELECT SOURCE_ROWID
                                   FROM ERROREVENT
                                   WHERE FILTERID = 9)) DC1
  ON (DC.DWSOURCEIDMELB = DC1.ID)
  WHEN NOT MATCHED THEN INSERT
    (DWCUSTID, DWSOURCEIDMELB, FIRSTNAME, SURNAME, GENDER, PHONE, POSTCODE, CITY, STATE, CUSTCATNAME)
  VALUES (DWCUSTSEQ.NEXTVAL, DC1.ID, DC1.FNAME, DC1.SNAME, DC1.GENDER, DC1.PHONE, DC1.POSTCODE, DC1.CITY, DC1.STATE, DC1.CATEGORYNAME);
  
  MERGE INTO DWCUST DC
  USING (SELECT       CM.ID AS ID,
                      CM.FNAME AS FNAME,
                      CM.SNAME AS SNAME,
                      CM.GENDER AS GENDER,
                      CM.PHONE AS PHONE,
                      CM.POSTCODE AS POSTCODE,
                      CM.CITY AS CITY,
                      CM.STATE AS STATE,
                      CC.CATEGORYNAME AS CATEGORYNAME
            FROM      PSALA.A2_T11_CUSTMELB CM
            INNER JOIN PSALA.A2CUSTCATEGORY CC
            ON CM.CUSTCAT = CC.CUSTCATEGORY
            WHERE     CM.ROWID IN
                                  (SELECT SOURCE_ROWID
                                   FROM ERROREVENT
                                   WHERE FILTERID = 9)) DC1
  ON (CONCAT(DC.FIRSTNAME, DC.SURNAME) = CONCAT(DC1.FNAME, DC1.SNAME) AND DC.PHONE = DC1.PHONE)
  WHEN MATCHED THEN UPDATE SET DC.DWSOURCEIDMELB = DC1.ID
  WHEN NOT MATCHED THEN INSERT
    (DWCUSTID, DWSOURCEIDMELB, FIRSTNAME, SURNAME, GENDER, PHONE, POSTCODE, CITY, STATE, CUSTCATNAME)
  VALUES (DWCUSTSEQ.NEXTVAL, DC1.ID, DC1.FNAME, DC1.SNAME, DC1.GENDER, DC1.PHONE, DC1.POSTCODE, DC1.CITY, DC1.STATE, DC1.CATEGORYNAME);
END;
/

--====================================================================================================
--Place CREATE OR REPLACE SP_CLEAN_SALES_MELB code below this line (or leave blank if not attempted)
CREATE OR REPLACE PROCEDURE SP_CLEAN_SALES_MELB AS
BEGIN
  MERGE INTO ERROREVENT EE
  USING (SELECT           SM.ROWID AS SOURCE_ROWID, 
                          'A2_T11_SALEMELB' AS SOURCE_TABLE, 
                          10 AS FILTERID, 
                          SYSDATE AS DATETIME, 
                          'SKIP' AS ACTION
                FROM      PSALA.A2_T11_SALEMELB SM
                WHERE     SM.PRODID NOT IN
                              (SELECT DWSOURCEID
                               FROM DWPROD
                               WHERE DWSOURCETABLE = 'A2PRODUCT')) EE1
  ON (EE.SOURCE_ROWID = EE1.SOURCE_ROWID AND EE.FILTERID = EE1.FILTERID)
  WHEN MATCHED THEN UPDATE SET EE.SOURCE_TABLE = EE1.SOURCE_TABLE,
                               EE.DATETIME = EE1.DATETIME,
                               EE.ACTION = EE1.ACTION
  WHEN NOT MATCHED THEN INSERT
    (ERRORID, SOURCE_ROWID, SOURCE_TABLE, FILTERID, DATETIME, ACTION)
  VALUES
    (ERROREVENTSEQ.NEXTVAL, EE1.SOURCE_ROWID, EE1.SOURCE_TABLE, EE1.FILTERID, EE1.DATETIME, EE1.ACTION);

  MERGE INTO ERROREVENT EE
  USING (SELECT           SM.ROWID AS SOURCE_ROWID, 
                          'A2_T11_SALEMELB' AS SOURCE_TABLE, 
                          11 AS FILTERID, 
                          SYSDATE AS DATETIME, 
                          'SKIP' AS ACTION
                FROM      PSALA.A2_T11_SALEMELB SM
                WHERE     SM.CUSTID NOT IN
                              (SELECT DC.DWSOURCEIDMELB
                               FROM DWCUST DC)
                          OR
                          SM.CUSTID IS NULL) EE1
  ON (EE.SOURCE_ROWID = EE1.SOURCE_ROWID AND EE.FILTERID = EE1.FILTERID)
  WHEN MATCHED THEN UPDATE SET EE.SOURCE_TABLE = EE1.SOURCE_TABLE,
                               EE.DATETIME = EE1.DATETIME,
                               EE.ACTION = EE1.ACTION
  WHEN NOT MATCHED THEN INSERT
    (ERRORID, SOURCE_ROWID, SOURCE_TABLE, FILTERID, DATETIME, ACTION)
  VALUES
    (ERROREVENTSEQ.NEXTVAL, EE1.SOURCE_ROWID, EE1.SOURCE_TABLE, EE1.FILTERID, EE1.DATETIME, EE1.ACTION);
  
  MERGE INTO ERROREVENT EE
  USING (SELECT           SM.ROWID AS SOURCE_ROWID, 
                          'A2_T11_SALEMELB' AS SOURCE_TABLE, 
                          12 AS FILTERID, 
                          SYSDATE AS DATETIME, 
                          'MODIFY' AS ACTION
                FROM      PSALA.A2_T11_SALEMELB SM
                WHERE     SM.SHIPDATE < SM.SALEDATE) EE1
  ON (EE.SOURCE_ROWID = EE1.SOURCE_ROWID AND EE.FILTERID = EE1.FILTERID)
  WHEN MATCHED THEN UPDATE SET EE.SOURCE_TABLE = EE1.SOURCE_TABLE,
                               EE.DATETIME = EE1.DATETIME,
                               EE.ACTION = EE1.ACTION
  WHEN NOT MATCHED THEN INSERT
    (ERRORID, SOURCE_ROWID, SOURCE_TABLE, FILTERID, DATETIME, ACTION)
  VALUES
    (ERROREVENTSEQ.NEXTVAL, EE1.SOURCE_ROWID, EE1.SOURCE_TABLE, EE1.FILTERID, EE1.DATETIME, EE1.ACTION);  

  MERGE INTO ERROREVENT EE
  USING (SELECT           SM.ROWID AS SOURCE_ROWID, 
                          'A2_T11_SALEMELB' AS SOURCE_TABLE, 
                          13 AS FILTERID, 
                          SYSDATE AS DATETIME, 
                          'MODIFY' AS ACTION
                FROM      PSALA.A2_T11_SALEMELB SM
                WHERE     SM.SALEPRICE IS NULL) EE1
  ON (EE.SOURCE_ROWID = EE1.SOURCE_ROWID AND EE.FILTERID = EE1.FILTERID)
  WHEN MATCHED THEN UPDATE SET EE.SOURCE_TABLE = EE1.SOURCE_TABLE,
                               EE.DATETIME = EE1.DATETIME,
                               EE.ACTION = EE1.ACTION
  WHEN NOT MATCHED THEN INSERT
    (ERRORID, SOURCE_ROWID, SOURCE_TABLE, FILTERID, DATETIME, ACTION)
  VALUES
    (ERROREVENTSEQ.NEXTVAL, EE1.SOURCE_ROWID, EE1.SOURCE_TABLE, EE1.FILTERID, EE1.DATETIME, EE1.ACTION);  
END;
/

--Place CREATE OR REPLACE SP_UPLOAD_SALES_MELB code below this line (or leave blank if not attempted)
CREATE OR REPLACE PROCEDURE SP_UPLOAD_SALE_MELB AS
BEGIN
  MERGE INTO DWSALE DS
  USING ( SELECT  DC.DWCUSTID AS DWCUSTID,
                  DP.DWPRODID AS DWPRODID,
                  SM.ROWID AS DWSOURCEIDMELB,
                  SM.QTY AS QTY,
                  SM.SALEDATE AS SALEDATE,
                  SM.SHIPDATE AS SHIPDATE,
                  SM.SALEPRICE AS SALEPRICE
          FROM    PSALA.A2_T11_SALEMELB SM
          INNER JOIN DWCUST DC
          ON SM.CUSTID = DC.DWSOURCEIDMELB
          INNER JOIN DWPROD DP
          ON SM.PRODID = DP.DWSOURCEID
          WHERE   SM.ROWID NOT IN
                            (SELECT SOURCE_ROWID
                             FROM ERROREVENT
                             WHERE FILTERID IN (10, 11, 12, 13)))  DS1
  ON (DS.DWSOURCEIDMELB = DS1.DWSOURCEIDMELB)
  WHEN MATCHED THEN UPDATE SET  DS.DWCUSTID = DS1.DWCUSTID, 
                                DS.DWPRODID = DS1.DWPRODID, 
                                DS.QTY = DS1.QTY, 
                                DS.SALEDATE = DS1.SALEDATE, 
                                DS.SHIPDATE = DS1.SHIPDATE, 
                                DS.SALEPRICE = DS1.SALEPRICE 
  WHEN NOT MATCHED THEN INSERT 
    (DWSALEID, DWCUSTID, DWPRODID, DWSOURCEIDMELB, QTY, SALEDATE, SHIPDATE, SALEPRICE)
  VALUES (DWSALESEQ.NEXTVAL, DS1.DWCUSTID, DS1.DWPRODID, DS1.DWSOURCEIDMELB, DS1.QTY, DS1.SALEDATE, DS1.SHIPDATE, DS1.SALEPRICE);
         
  MERGE INTO DWSALE DS
  USING (SELECT   DC.DWCUSTID AS DWCUSTID,
                  DP.DWPRODID AS DWPRODID,
                  SM.ROWID AS DWSOURCEIDMELB,
                  SM.QTY AS QTY,
                  SM.SALEDATE AS SALEDATE,
                  TO_DATE(SM.SALEDATE) + 2 AS SHIPDATE,
                  SM.SALEPRICE AS SALEPRICE
          FROM    PSALA.A2_T11_SALEMELB SM
          INNER JOIN DWCUST DC
          ON SM.CUSTID = DC.DWSOURCEIDMELB
          INNER JOIN DWPROD DP
          ON SM.PRODID = DP.DWSOURCEID
          WHERE   SM.ROWID IN
                            (SELECT SOURCE_ROWID
                             FROM ERROREVENT
                             WHERE FILTERID = 12
                             AND   ACTION = 'MODIFY'))  DS1
  ON (DS.DWSOURCEIDMELB = DS1.DWSOURCEIDMELB)
  WHEN MATCHED THEN UPDATE SET DS.SHIPDATE = DS1.SHIPDATE
  WHEN NOT MATCHED THEN INSERT 
    (DWSALEID, DWCUSTID, DWPRODID, DWSOURCEIDMELB, QTY, SALEDATE, SHIPDATE, SALEPRICE)
  VALUES (DWSALESEQ.NEXTVAL, DS1.DWCUSTID, DS1.DWPRODID, DS1.DWSOURCEIDMELB, DS1.QTY, DS1.SALEDATE, DS1.SHIPDATE, DS1.SALEPRICE);                           
                             
  MERGE INTO DWSALE DS
  USING (SELECT   DC.DWCUSTID AS DWCUSTID,
                  DP.DWPRODID AS DWPRODID,
                  SM.ROWID AS DWSOURCEIDMELB,
                  SM.QTY AS QTY,
                  SM.SALEDATE AS SALEDATE,
                  SM.SHIPDATE AS SHIPDATE,
                  SF_GET_MOST_RECENT_PRICE(SM.PRODID) AS SALEPRICE
          FROM    PSALA.A2_T11_SALEMELB SM
          INNER JOIN DWCUST DC
          ON SM.CUSTID = DC.DWSOURCEIDMELB
          INNER JOIN DWPROD DP
          ON SM.PRODID = DP.DWSOURCEID
          WHERE   SM.ROWID IN
                            (SELECT SOURCE_ROWID
                             FROM ERROREVENT
                             WHERE FILTERID = 13
                             AND   ACTION = 'MODIFY'))  DS1
  ON (DS.DWSOURCEIDMELB = DS1.DWSOURCEIDMELB)
  WHEN MATCHED THEN UPDATE SET DS.SALEPRICE = DS1.SALEPRICE
  WHEN NOT MATCHED THEN INSERT 
    (DWSALEID, DWCUSTID, DWPRODID, DWSOURCEIDMELB, QTY, SALEDATE, SHIPDATE, SALEPRICE)
  VALUES (DWSALESEQ.NEXTVAL, DS1.DWCUSTID, DS1.DWPRODID, DS1.DWSOURCEIDMELB, DS1.QTY, DS1.SALEDATE, DS1.SHIPDATE, DS1.SALEPRICE);
END;
/

--Place code that executes the above SPs below this line (or leave blank if not attempted)
BEGIN
  SP_CLEAN_CUST_MELB;
  SP_UPLOAD_CUSTOMER_MELB;
  SP_CLEAN_SALES_MELB;
  SP_UPLOAD_SALE_MELB;
END;
/
--====================================================================================================
--QUERY 1
--Modify this query so that it matches the table names and column names used in your database
PROMPT ***** QUERY 1 Filter count *****
SELECT   FILTERID, ACTION, COUNT(*)
FROM     ERROREVENT
GROUP BY FILTERID, ACTION
ORDER BY 1,2;


--QUERY  2
--This query counts the number of rows in each of the DW% tables
PROMPT ***** QUERY 2 DW Row Count *****
SELECT TABLE_NAME,
   TO_NUMBER(EXTRACTVALUE(XMLTYPE(DBMS_XMLGEN.GETXML('SELECT COUNT(*) C FROM '
   || TABLE_NAME)),'/ROWSET/ROW/C')) ROW_COUNT
   FROM USER_TABLES
   WHERE TABLE_NAME IN (SELECT TABLE_NAME FROM USER_TABLES
WHERE TABLE_NAME  LIKE 'DW%')
ORDER BY 1;


--QUERY  3
--Place SQL Query that lists total sales for each weekday 
--below this line (or leave blank if not attempted)
PROMPT ***** QUERY 3 Weekday sales *****
SELECT TO_CHAR(TO_DATE(SALEDATE, 'DD/MM/YYYY'), 'DAY') AS WEEKDAY, SUM(SALEPRICE * QTY) AS "TOTAL SALES" 
FROM DWSALE GROUP BY TO_CHAR(TO_DATE(SALEDATE, 'DD/MM/YYYY'), 'DAY')
ORDER BY 2 DESC;


--QUERY  4
--Place SQL Query that lists each customer category total sales 
--below this line (or leave blank if not attempted
PROMPT ***** QUERY 4 Customer Category Sales*****
SELECT DC.CUSTCATNAME AS CUSTCATNAME, SUM(DS.SALEPRICE * DS.QTY) AS "TOTAL SALES"
FROM DWSALE DS
LEFT JOIN DWCUST DC
ON DC.DWCUSTID = DS.DWCUSTID
GROUP BY DC.CUSTCATNAME
ORDER BY 2 ASC;

--QUERY  5
--Place SQL Query that lists sales for each product manufacturer
--below this line (or leave blank if not attempted)
PROMPT ***** QUERY 5 Sales by Manufacturer*****
SELECT DP.PRODMANUNAME AS PRODMANUNAME, SUM(DS.QTY) AS "TOTAL SALES"
FROM DWSALE DS
LEFT JOIN DWPROD DP
ON DP.DWPRODID = DS.DWPRODID
GROUP BY DP.PRODMANUNAME
ORDER BY 2 DESC;

--QUERY  6
--Place SQL Query that lists top 10 customers 
--below this line (or leave blank if not attempted)
PROMPT ***** QUERY 6 Top 10 Customers *****
SELECT *
FROM (SELECT DC.DWCUSTID AS DWCUSTID, DC.FIRSTNAME AS FIRSTNAME, DC.SURNAME AS SURNAME, SUM(DS.SALEPRICE * DS.QTY) AS "TOTAL SALES"
FROM DWSALE DS
INNER JOIN DWCUST DC
ON DC.DWCUSTID = DS.DWCUSTID
GROUP BY DC.DWCUSTID, DC.FIRSTNAME, DC.SURNAME
ORDER BY 4 DESC) TOP10CUST
WHERE ROWNUM <= 10
ORDER BY ROWNUM ASC;

--QUERY  7
--Place SQL Query that lists bottom 10 products
--below this line (or leave blank if not attempted)
PROMPT ***** QUERY 7 Bottom 10 products *****
SELECT *
FROM (SELECT DP.DWPRODID AS DWPRODID, DP.PRODNAME AS PRODNAME, SUM(DS.SALEPRICE * DS.QTY) AS "TOTAL SALES"
FROM DWSALE DS
LEFT JOIN DWPROD DP
ON DP.DWPRODID = DS.DWCUSTID
GROUP BY DP.DWPRODID, DP.PRODNAME
ORDER BY 3 ASC) BOTTOM10PROD
WHERE ROWNUM <= 10
ORDER BY ROWNUM ASC;

--QUERY  8
/--Place SQL Query that lists top City in each State
--below this line (or leave blank if not attempted)
PROMPT ***** QUERY 8 Top City in each State list *****
SELECT  
    STATE
  , CITY
  , TOTALSALES
FROM  (
        SELECT 
            STATE
          , CITY
          , TOTALSALES
          , RANK() OVER (PARTITION BY STATE ORDER BY TOTALSALES DESC) AS RANK
        FROM (
                SELECT 
                  DC.STATE AS STATE
                  ,DC.CITY AS CITY
                  ,SUM(DS.SALEPRICE * DS.QTY) AS TOTALSALES
                FROM  DWSALE DS
                INNER JOIN DWCUST DC
                ON  DS.DWCUSTID = DC.DWCUSTID
                GROUP BY DC.STATE, DC.CITY
                )
          )
WHERE   RANK = 1
ORDER BY STATE;